# -*- coding: utf-8 -*-
"""Stock prediction RNN 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14PzVNmNnsPdzUUkLheQk9PqOFNS27saM
"""

import numpy as np
import math
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential, load_model
from keras.layers import LSTM, Dense, Dropout
import os
import tensorflow as tf



pd = pd.read_csv('/content/AAPL.csv')
pd.head()

plt.figure(figsize=(16,8))
plt.title('Close price movement')
plt.plot(pd['close'])
plt.xlabel('date', fontsize =18)
plt.ylabel('close price $', fontsize =18)
plt.show

pd = pd['close'].values
pd = pd.reshape(-1, 1)
print(pd.shape)
pd[:5]

train = np.array(pd[:int(pd.shape[0]*0.8)])
test = np.array(pd[int(pd.shape[0]*0.8)-50:])
print(train.shape)
print(test.shape)

scaler = MinMaxScaler(feature_range=(0,1))
train = scaler.fit_transform(train)
train[:5]

test = scaler.transform(test)

def create_dataset(pd):
    x = []
    y = []
    for i in range(50, pd.shape[0]):
        x.append(pd[i-50:i, 0])
        y.append(pd[i, 0])
    x = np.array(x)
    y = np.array(y)
    return x,y

x_train, y_train = create_dataset(train)

x_test, y_test = create_dataset(test)

x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

model = Sequential()
model.add(LSTM(units=96, return_sequences=True, input_shape=(x_train.shape[1], 1)))
model.add(Dropout(0.2))
model.add(LSTM(units=96, return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(units=96, return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(units=96))
model.add(Dropout(0.2))
model.add(Dense(units=1))

model.summary()

model.compile(loss='mean_squared_error', optimizer='adam')

# if(not os.path.exists('stock_prediction.h5')):
model.fit(x_train, y_train, validation_split=0.25, epochs=50, batch_size=32)
model.save('stock_prediction.h5')

model = load_model('stock_prediction.h5')

predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

fig, ax = plt.subplots(figsize=(8,4))
plt.plot(pd, color='red',  label="True Price")
ax.plot(range(len(y_train)+50,len(y_train)+50+len(predictions)),predictions, color='blue', label='Predicted Testing Price')
plt.legend()

y_test_scaled = scaler.inverse_transform(y_test.reshape(-1, 1))

fig, ax = plt.subplots(figsize=(8,4))
ax.plot(y_test_scaled, color='red', label='True Testing Price')
plt.plot(predictions, color='blue', label='Predicted Testing Price')
plt.legend()

print(classification_report(y_test, predictions))
print(confusion_matrix(y_test, predictions))

r_f1 = round(f1_score(y_test, predictions, average= 'weighted'), 3)
r_accuracy = round((accuracy_score(y_test, predictions) * 100), 2)

print("Accuracy : " , r_accuracy , " %")
print("f1_score : " , r_f1)

